{"version":3,"sources":["../src/sdk/speech/DeepSpeech.ts"],"names":[],"mappings":"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","file":"DeepSpeech.js","sourcesContent":["import * as io from \"socket.io-client\";\nimport * as ss from \"../js/socket.io-stream\";\nimport Recorder from \"./recorder\";\n\nexport class DeepSpeech {\n    protected socket: any;\n    protected stream: any;\n    protected recorder: any;\n    private context: AudioContext; \n    \n    public async init(): Promise<any> {\n        return new Promise(async (resolve: (value?: {} | PromiseLike<{}> | undefined) => void, reject: (reason?: any) => void) => {\n            try {\n                this.socket = io.connect(\"http://192.168.50.86:3000\");\n                this.context = new AudioContext();\n                this.stream = await this.getMediaStream();\n                if (this.context.state == \"suspended\") {\n                    await this.resumeAudioContext();\n                }\n                const input = this.context.createMediaStreamSource(this.stream);\n                this.recorder = new Recorder(input, {\n                    numChannels: 1,\n                  });\n                console.log(\"recorder....\",this.recorder);\n                resolve();\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    public recordAudio(): void {\n        this.recorder.clear();\n        this.recorder.record();\n    }\n\n    public stopAudio(): Promise<any> {\n        return new Promise((resolve: (value?: {} | PromiseLike<{}> | undefined) => void, reject: (reason?: any) => void) => {\n            try {\n              \n                this.recorder.stop();\n                this.recorder.exportWAV((blob) => {\n                const stream = ss.createStream();\n                ss(this.socket).emit('audio', stream);\n                ss.createBlobReadStream(blob).pipe(stream);\n                ss(this.socket).on('sttresult', (stream,data) => {\n                    if (!stream || data.err) {\n                        reject('Issue at DeepSpeech side');\n                    } else {\n                        resolve(data.text);\n                    }\n                });\n                });\n            } catch (err) {\n                // console.log(\"error...\",err);\n                reject(err);\n            }\n          });\n    }\n\n    private async getMediaStream(): Promise<any> {\n        let stream = null;\n        const constraints = { \n            audio: true,\n            echoCancellation: true,\n            noiseSuppression: true\n         };\n        try {\n            stream = await navigator.mediaDevices.getUserMedia(constraints);\n            return stream;\n        } catch (err) {\n            throw err;\n        }\n    }\n\n    private resumeAudioContext():Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.context.resume().then(() => {\n            // console.log('Playback resumed successfully');\n            resolve();\n          }).catch(err =>{\n            //   console.log(\"resumeAudioContext error\",err)\n              reject(err);\n          });\n        });\n      }\n}\n"]}