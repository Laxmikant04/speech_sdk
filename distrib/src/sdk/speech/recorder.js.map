{"version":3,"sources":["../src/sdk/speech/recorder.ts"],"names":[],"mappings":"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","file":"recorder.js","sourcesContent":["import InlineWorker from '../js/inline-worker';\r\n\r\nclass Recorder {\r\n    private context;\r\n    private node;\r\n    private worker;\r\n\r\n    config:any = {\r\n        bufferLen: 4096,\r\n        numChannels: 2,\r\n        mimeType: 'audio/wav'\r\n    };\r\n\r\n    recording = false;\r\n\r\n    callbacks : any = {\r\n        getBuffer: [],\r\n        exportWAV: []\r\n    };\r\n\r\n    constructor(source, cfg) {\r\n        Object.assign(this.config, cfg);\r\n        this.context = source.context;\r\n        this.node = (this.context.createScriptProcessor ||\r\n        this.context.createJavaScriptNode).call(this.context,\r\n            this.config.bufferLen, this.config.numChannels, this.config.numChannels);\r\n\r\n        this.node.onaudioprocess = (e) => {\r\n            if (!this.recording) return;\r\n\r\n            var buffer = [];\r\n            for (var channel = 0; channel < this.config.numChannels; channel++) {\r\n                buffer.push(e.inputBuffer.getChannelData(channel));\r\n            }\r\n            this.worker.postMessage({\r\n                command: 'record',\r\n                buffer: buffer\r\n            });\r\n        };\r\n\r\n        source.connect(this.node);\r\n        this.node.connect(this.context.destination);    //this should not be necessary\r\n\r\n        let self = {};\r\n        this.worker = new InlineWorker(function () {\r\n            let recLength = 0,\r\n                recBuffers = [],\r\n                sampleRate,\r\n                numChannels;\r\n\r\n            this.onmessage = function (e) {\r\n                switch (e.data.command) {\r\n                    case 'init':\r\n                        init(e.data.config);\r\n                        break;\r\n                    case 'record':\r\n                        record(e.data.buffer);\r\n                        break;\r\n                    case 'exportWAV':\r\n                        exportWAV(e.data.type);\r\n                        break;\r\n                    case 'getBuffer':\r\n                        getBuffer();\r\n                        break;\r\n                    case 'clear':\r\n                        clear();\r\n                        break;\r\n                }\r\n            };\r\n\r\n            function init(config) {\r\n                sampleRate = config.sampleRate;\r\n                numChannels = config.numChannels;\r\n                initBuffers();\r\n            }\r\n\r\n            function record(inputBuffer) {\r\n                for (var channel = 0; channel < numChannels; channel++) {\r\n                    recBuffers[channel].push(inputBuffer[channel]);\r\n                }\r\n                recLength += inputBuffer[0].length;\r\n            }\r\n\r\n            function exportWAV(type) {\r\n                let buffers = [];\r\n                for (let channel = 0; channel < numChannels; channel++) {\r\n                    buffers.push(mergeBuffers(recBuffers[channel], recLength));\r\n                }\r\n                let interleaved;\r\n                if (numChannels === 2) {\r\n                    interleaved = interleave(buffers[0], buffers[1]);\r\n                } else {\r\n                    interleaved = buffers[0];\r\n                }\r\n                let dataview = encodeWAV(interleaved);\r\n                let audioBlob = new Blob([dataview], {type: type});\r\n\r\n                this.postMessage({command: 'exportWAV', data: audioBlob});\r\n            }\r\n\r\n            function getBuffer() {\r\n                let buffers = [];\r\n                for (let channel = 0; channel < numChannels; channel++) {\r\n                    buffers.push(mergeBuffers(recBuffers[channel], recLength));\r\n                }\r\n                this.postMessage({command: 'getBuffer', data: buffers});\r\n            }\r\n\r\n            function clear() {\r\n                recLength = 0;\r\n                recBuffers = [];\r\n                initBuffers();\r\n            }\r\n\r\n            function initBuffers() {\r\n                for (let channel = 0; channel < numChannels; channel++) {\r\n                    recBuffers[channel] = [];\r\n                }\r\n            }\r\n\r\n            function mergeBuffers(recBuffers, recLength) {\r\n                let result = new Float32Array(recLength);\r\n                let offset = 0;\r\n                for (let i = 0; i < recBuffers.length; i++) {\r\n                    result.set(recBuffers[i], offset);\r\n                    offset += recBuffers[i].length;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function interleave(inputL, inputR) {\r\n                let length = inputL.length + inputR.length;\r\n                let result = new Float32Array(length);\r\n\r\n                let index = 0,\r\n                    inputIndex = 0;\r\n\r\n                while (index < length) {\r\n                    result[index++] = inputL[inputIndex];\r\n                    result[index++] = inputR[inputIndex];\r\n                    inputIndex++;\r\n                }\r\n                return result;\r\n            }\r\n\r\n            function floatTo16BitPCM(output, offset, input) {\r\n                for (let i = 0; i < input.length; i++, offset += 2) {\r\n                    let s = Math.max(-1, Math.min(1, input[i]));\r\n                    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n                }\r\n            }\r\n\r\n            function writeString(view, offset, string) {\r\n                for (let i = 0; i < string.length; i++) {\r\n                    view.setUint8(offset + i, string.charCodeAt(i));\r\n                }\r\n            }\r\n\r\n            function encodeWAV(samples) {\r\n                let buffer = new ArrayBuffer(44 + samples.length * 2);\r\n                let view = new DataView(buffer);\r\n\r\n                /* RIFF identifier */\r\n                writeString(view, 0, 'RIFF');\r\n                /* RIFF chunk length */\r\n                view.setUint32(4, 36 + samples.length * 2, true);\r\n                /* RIFF type */\r\n                writeString(view, 8, 'WAVE');\r\n                /* format chunk identifier */\r\n                writeString(view, 12, 'fmt ');\r\n                /* format chunk length */\r\n                view.setUint32(16, 16, true);\r\n                /* sample format (raw) */\r\n                view.setUint16(20, 1, true);\r\n                /* channel count */\r\n                view.setUint16(22, numChannels, true);\r\n                /* sample rate */\r\n                view.setUint32(24, sampleRate, true);\r\n                /* byte rate (sample rate * block align) */\r\n                view.setUint32(28, sampleRate * 4, true);\r\n                /* block align (channel count * bytes per sample) */\r\n                view.setUint16(32, numChannels * 2, true);\r\n                /* bits per sample */\r\n                view.setUint16(34, 16, true);\r\n                /* data chunk identifier */\r\n                writeString(view, 36, 'data');\r\n                /* data chunk length */\r\n                view.setUint32(40, samples.length * 2, true);\r\n\r\n                floatTo16BitPCM(view, 44, samples);\r\n\r\n                return view;\r\n            }\r\n        }, self);\r\n\r\n        this.worker.postMessage({\r\n            command: 'init',\r\n            config: {\r\n                sampleRate: this.context.sampleRate,\r\n                numChannels: this.config.numChannels\r\n            }\r\n        });\r\n\r\n        this.worker.onmessage = (e) => {\r\n            let cb = this.callbacks[e.data.command].pop();\r\n            if (typeof cb == 'function') {\r\n                cb(e.data.data);\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    record() {\r\n        this.recording = true;\r\n    }\r\n\r\n    stop() {\r\n        this.recording = false;\r\n    }\r\n\r\n    clear() {\r\n        this.worker.postMessage({command: 'clear'});\r\n    }\r\n\r\n    getBuffer(cb) {\r\n        cb = cb || this.config.callback;\r\n        if (!cb) throw new Error('Callback not set');\r\n\r\n        this.callbacks.getBuffer.push(cb);\r\n\r\n        this.worker.postMessage({command: 'getBuffer'});\r\n    }\r\n\r\n    exportWAV(cb, mimeType) {\r\n        mimeType = mimeType || this.config.mimeType;\r\n        cb = cb || this.config.callback;\r\n        if (!cb) throw new Error('Callback not set');\r\n\r\n        this.callbacks.exportWAV.push(cb);\r\n\r\n        this.worker.postMessage({\r\n            command: 'exportWAV',\r\n            type: mimeType\r\n        });\r\n    }\r\n\r\n    static\r\n    forceDownload(blob, filename) {\r\n        let url = (window.URL || (window as any).webkitURL).createObjectURL(blob);\r\n        let link = window.document.createElement('a');\r\n        link.href = url;\r\n        link.download = filename || 'output.wav';\r\n        let click = document.createEvent(\"Event\");\r\n        click.initEvent(\"click\", true, true);\r\n        link.dispatchEvent(click);\r\n    }\r\n}\r\n\r\nexport default Recorder;\r\n"]}